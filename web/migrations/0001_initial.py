# Generated by Django 5.1.6 on 2025-03-20 13:52

import django.core.validators
import django.db.models.deletion
import markdownx.models
import uuid
import web.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('week_number', models.PositiveIntegerField(unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='ForumCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('slug', models.SlugField(unique=True)),
                ('icon', models.CharField(help_text='Font Awesome icon class', max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Forum Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Goods',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Product title (e.g., 'Algebra Basics Workbook')", max_length=100)),
                ('description', models.TextField(help_text='Detailed product description')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in USD', max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, help_text='Discounted price (optional)', max_digits=10, null=True)),
                ('stock', models.PositiveIntegerField(blank=True, help_text='Leave blank for digital products', null=True)),
                ('product_type', models.CharField(choices=[('physical', 'Physical Product'), ('digital', 'Digital Download')], default='physical', max_length=10)),
                ('file', models.FileField(blank=True, help_text='Required for digital products', upload_to='digital_goods/')),
                ('category', models.CharField(blank=True, help_text="e.g., 'Books', 'Course Materials'", max_length=100)),
                ('is_available', models.BooleanField(default=True, help_text='Show/hide product from store')),
                ('sku', models.CharField(blank=True, help_text='Inventory tracking ID (auto-generated)', max_length=50, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('content', markdownx.models.MarkdownxField()),
                ('excerpt', models.TextField(blank=True)),
                ('featured_image', models.ImageField(blank=True, help_text='Featured image for the blog post', upload_to='blog/images/')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=10)),
                ('tags', models.CharField(blank=True, help_text="Comma-separated tags (e.g., 'python, django, web development')", max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='web.blogcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='web.blogpost')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, default='', max_length=40)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChallengeSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_text', models.TextField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('points_awarded', models.IntegerField(default=10)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('image', models.ImageField(blank=True, help_text='Course image (will be resized to 300x300 pixels)', upload_to='course_images')),
                ('description', markdownx.models.MarkdownxField()),
                ('learning_objectives', markdownx.models.MarkdownxField()),
                ('prerequisites', markdownx.models.MarkdownxField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('allow_individual_sessions', models.BooleanField(default=False, help_text='Allow students to register for individual sessions')),
                ('invite_only', models.BooleanField(default=False, help_text='If enabled, students can only enroll with an invitation')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=10)),
                ('max_students', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=200)),
                ('is_featured', models.BooleanField(default=False)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_teaching', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='web.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificate_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('completion_date', models.DateField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='web.course')),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(choices=[('attendance', 'Perfect Attendance'), ('completion', 'Course Completion'), ('participation', 'Active Participation'), ('excellence', 'Academic Excellence')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='web.course')),
            ],
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('donation_type', models.CharField(choices=[('one_time', 'One-time Donation'), ('subscription', 'Monthly Subscription')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('stripe_payment_intent_id', models.CharField(blank=True, default='', max_length=100)),
                ('stripe_subscription_id', models.CharField(blank=True, default='', max_length=100)),
                ('stripe_customer_id', models.CharField(blank=True, default='', max_length=100)),
                ('message', models.TextField(blank=True)),
                ('anonymous', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='donations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('payment_intent_id', models.CharField(blank=True, default='', max_length=100)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='web.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('month', models.IntegerField()),
                ('year', models.IntegerField()),
                ('share_token', models.CharField(max_length=32, unique=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_calendars', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ForumTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('views', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_topics', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='web.forumcategory')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_solution', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_replies', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='web.forumtopic')),
            ],
            options={
                'verbose_name_plural': 'Forum Replies',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('info', 'Information'), ('success', 'Success'), ('warning', 'Warning'), ('error', 'Error')], default='info', max_length=10)),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Payment'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='draft', max_length=10)),
                ('shipping_address', models.JSONField(blank=True, help_text='Structured shipping details', null=True)),
                ('tracking_number', models.CharField(blank=True, max_length=100)),
                ('terms_accepted', models.BooleanField(default=False, help_text='User accepted terms during checkout')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price_at_purchase', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('discounted_price_at_purchase', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=10, null=True)),
                ('goods', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='web.goods', verbose_name='Product')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='web.order')),
            ],
            options={
                'verbose_name': 'Order Line Item',
            },
        ),
        migrations.CreateModel(
            name='PeerConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('blocked', 'Blocked')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_connections', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_connections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PeerMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Points',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=0)),
                ('reason', models.CharField(help_text='Reason for awarding points', max_length=255)),
                ('point_type', models.CharField(choices=[('regular', 'Regular Points'), ('streak', 'Streak Points'), ('bonus', 'Bonus Points')], default='regular', max_length=20)),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('challenge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='points_awarded', to='web.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Points',
                'ordering': ['-awarded_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Product display image', upload_to='goods_images/')),
                ('alt_text', models.CharField(blank=True, help_text='Accessibility description for screen readers', max_length=125)),
                ('goods', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goods_images', to='web.goods')),
            ],
        ),
        migrations.AddField(
            model_name='goods',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='goods_images', to='web.productimage'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('expertise', models.CharField(blank=True, max_length=200)),
                ('avatar', models.ImageField(blank=True, default='', upload_to='avatars/')),
                ('is_teacher', models.BooleanField(default=False)),
                ('referral_code', models.CharField(blank=True, max_length=20, unique=True)),
                ('referral_earnings', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('stripe_account_id', models.CharField(blank=True, max_length=100)),
                ('stripe_account_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('commission_rate', models.DecimalField(blank=True, decimal_places=2, default=10.0, help_text='Commission rate in percentage (e.g., 10.00 for 10%)', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('referred_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referrals', to='web.profile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProgressTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('current_value', models.IntegerField(default=0)),
                ('target_value', models.IntegerField()),
                ('color', models.CharField(choices=[('blue-600', 'Primary'), ('green-600', 'Success'), ('yellow-600', 'Warning'), ('red-600', 'Danger'), ('gray-600', 'Secondary')], default='blue-600', max_length=20)),
                ('public', models.BooleanField(default=True)),
                ('embed_code', models.CharField(editable=False, max_length=36, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_trackers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='web.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SearchLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=255)),
                ('results_count', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('filters_applied', models.JSONField(blank=True, default=dict)),
                ('search_type', models.CharField(choices=[('course', 'Course Search'), ('material', 'Material Search'), ('forum', 'Forum Search')], default='course', max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('is_virtual', models.BooleanField(default=True)),
                ('meeting_link', models.URLField(blank=True)),
                ('meeting_id', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price for individual session registration', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enable_rollover', models.BooleanField(default=False, help_text='Enable automatic date rollover if no students are enrolled')),
                ('rollover_pattern', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', help_text='How often to roll over the session dates', max_length=20)),
                ('original_start_time', models.DateTimeField(blank=True, help_text='Original start time before any rollovers', null=True)),
                ('original_end_time', models.DateTimeField(blank=True, help_text='Original end time before any rollovers', null=True)),
                ('is_rolled_over', models.BooleanField(default=False, help_text='Whether this session has been rolled over')),
                ('teacher_confirmed', models.BooleanField(default=False, help_text='Whether the teacher has confirmed the rolled over dates')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='web.course')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('stripe_payment_intent_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enrollment', models.ForeignKey(help_text='The enrollment this payment is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='web.enrollment')),
                ('session', models.ForeignKey(blank=True, help_text='Specific session this payment is for, if any', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='web.session')),
            ],
        ),
        migrations.CreateModel(
            name='CourseProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='web.enrollment')),
                ('completed_sessions', models.ManyToManyField(related_name='completed_by', to='web.session')),
            ],
        ),
        migrations.CreateModel(
            name='CourseMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('material_type', models.CharField(choices=[('video', 'Video'), ('image', 'Image'), ('document', 'Document'), ('presentation', 'Presentation'), ('exercise', 'Exercise'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('other', 'Other')], max_length=20)),
                ('file', models.FileField(blank=True, upload_to='course_materials/')),
                ('external_url', models.URLField(blank=True, help_text='URL for external content like YouTube videos')),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_downloadable', models.BooleanField(default=True)),
                ('requires_enrollment', models.BooleanField(default=True, help_text='If True, only enrolled students can access full content')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='web.course')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='materials', to='web.session')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='web.cart')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='web.course')),
                ('goods', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='web.goods')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='web.session')),
            ],
        ),
        migrations.CreateModel(
            name='SessionAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('excused', 'Excused'), ('late', 'Late')], default='absent', max_length=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='web.session')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_attendances', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SessionEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('payment_intent_id', models.CharField(blank=True, default='', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='web.session')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Storefront',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Store Name', help_text='Display name for your store', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Describe your store for customers')),
                ('logo', models.ImageField(blank=True, help_text='Recommended size: 200x200px', upload_to='store_logos/')),
                ('store_slug', models.SlugField(blank=True, help_text='Auto-generated URL-friendly identifier', unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable public visibility of your store')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teacher', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='storefront', to=settings.AUTH_USER_MODEL, verbose_name='Teacher Profile')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='storefront',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='web.storefront'),
        ),
        migrations.AddField(
            model_name='goods',
            name='storefront',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goods', to='web.storefront'),
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('max_members', models.IntegerField(default=10)),
                ('is_private', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='web.course')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='joined_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Meme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A descriptive title for the meme', max_length=200)),
                ('caption', models.TextField(blank=True, help_text='The text content of the meme')),
                ('image', models.ImageField(help_text='Upload a meme image (JPG, PNG, or GIF, max 2MB)', upload_to='memes/', validators=[web.models.validate_image_size, web.models.validate_image_extension])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='memes', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(help_text='The educational subject this meme relates to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='memes', to='web.subject')),
            ],
            options={
                'verbose_name': 'Meme',
                'verbose_name_plural': 'Memes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EducationalVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('video_url', models.URLField(help_text='URL for external content like YouTube videos')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educational_videos', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='educational_videos', to='web.subject')),
            ],
            options={
                'verbose_name': 'Educational Video',
                'verbose_name_plural': 'Educational Videos',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='SuccessStory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('content', markdownx.models.MarkdownxField()),
                ('excerpt', models.TextField(blank=True)),
                ('featured_image', models.ImageField(blank=True, help_text='Featured image for the success story', upload_to='success_stories/images/')),
                ('status', models.CharField(choices=[('published', 'Published'), ('archived', 'Archived')], default='published', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='success_stories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Success Story',
                'verbose_name_plural': 'Success Stories',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('day', models.IntegerField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='web.eventcalendar')),
            ],
        ),
        migrations.CreateModel(
            name='WebRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.CharField(blank=True, default='', max_length=100)),
                ('user', models.CharField(blank=True, default='', max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('agent', models.TextField(blank=True, default='')),
                ('count', models.BigIntegerField(default=1)),
                ('path', models.CharField(blank=True, default='', max_length=255)),
                ('referer', models.CharField(blank=True, default='', max_length=255)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='web_requests', to='web.course')),
            ],
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(('user__isnull', False), ('session_key__gt', ''), _connector='OR'), name='cart_user_or_session_key'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='orderitem',
            unique_together={('order', 'goods')},
        ),
        migrations.AlterUniqueTogether(
            name='peerconnection',
            unique_together={('sender', 'receiver')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('student', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('cart', 'course'), ('cart', 'goods'), ('cart', 'session')},
        ),
        migrations.AlterUniqueTogether(
            name='sessionattendance',
            unique_together={('session', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='sessionenrollment',
            unique_together={('student', 'session')},
        ),
        migrations.AddIndex(
            model_name='meme',
            index=models.Index(fields=['-created_at'], name='web_meme_created_b43882_idx'),
        ),
        migrations.AddIndex(
            model_name='meme',
            index=models.Index(fields=['subject'], name='web_meme_subject_1b89ce_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='timeslot',
            unique_together={('calendar', 'name', 'day')},
        ),
    ]
